# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run

permissions:
  contents: read
  pull-requests: write
  checks: write

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
    types: [opened, edited, reopened, synchronize, review_requested, submitted]

jobs:
  # review-check:
  #   name: Code Review Check
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   steps:
  #     - name: Перевірка наявності схваленого код-рев'ю
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const prNumber = context.payload.pull_request.number;
  #           const {data: reviews} = await github.rest.pulls.listReviews({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             pull_number: prNumber
  #           });
  #           const approved = reviews.some(review => review.state === 'APPROVED');
  #           if (!approved) {
  #             core.setFailed("Код-рев'ю не схвалено");
  #           }

  reviewdog:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Fix permissions
        run: |
          sudo chown -R root:root $GITHUB_WORKSPACE
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          
      - name: Run flake8 with Reviewdog
        uses: reviewdog/action-flake8@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: error
          
      - name: Run Black with Reviewdog
        uses: reviewdog/action-black@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: info
  
  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        
    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

  sonarqube:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cloc:
    name: Count Lines of Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Count lines of code
        run: |
          sudo apt-get install -y cloc
          cloc src/ > cloc-report.txt
          cat cloc-report.txt
          
      - name: Upload CLOC report
        uses: actions/upload-artifact@v4
        with:
          name: cloc-report
          path: cloc-report.txt

    
